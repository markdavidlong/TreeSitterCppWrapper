#pragma once

#include "api.h"
#include <string>

struct CTSLanguage
{
public:
    CTSLanguage() = delete;
    CTSLanguage(const CTSLanguage&) = delete;
    CTSLanguage(const CTSLanguage&&) = delete;
    CTSLanguage operator= (const CTSLanguage&) = delete;
    CTSLanguage operator= (const CTSLanguage&&) = delete;

    /**
     * Creates a wrapper around a bare TSLanguage language object to facilitate
     * its usage in the TSWrapperLib class structure.
     *
     * This class does not take ownership of the language object.
     *
     */
    CTSLanguage(const TSLanguage* lang);

    /**
     * Destroys object.  Does not free the language object it wraps.
     */
    ~CTSLanguage() = default;

    /**
     * Get the number of distinct node types in the language.
     */
    uint32_t SymbolCount() const;

    /**
     * Get a node type string for the given numerical id.
     */
    std::string SymbolName(TSSymbol symbol) const;

    /**
     * Get the numerical id for the given node type string.
     */
    TSSymbol SymbolForName(const std::string &name, bool is_named) const;

    /**
     * Get the number of distinct field names in the language.
     */
    uint32_t FieldCount() const;

    /**
     * Get the field name string for the given numerical id.
     */
    std::string FieldNameForId(TSFieldId id) const;

    /**
     * Get the numerical id for the given field name string.
     */
    TSFieldId FieldIdForName(const std::string &name) const;

    /**
     * Check whether the given node type id belongs to named nodes, anonymous nodes,
     * or a hidden nodes.
     *
     * See also `CTSNode::IsNamed`. Hidden nodes are never returned from the API.
     */
    TSSymbolType SymbolType(TSSymbol symbol) const;

    /**
     * Get the ABI version number for this language. This version number is used
     * to ensure that languages were generated by a compatible version of
     * Tree-sitter.
     *
     * See also `CTSParser::SetLanguage`, 'CTSParser::LibraryLanguageVersion', and '
     * CTSParser::MinCompatibleLanguageVersion'
     */
    uint32_t Version() const { return ts_language_version(m_language); }


    const TSLanguage* GetTSLanguage() const { return m_language; }
private:
    const TSLanguage* m_language;
};
